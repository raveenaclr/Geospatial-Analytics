---
title: "Geospatial Data Wrangling"
---

### 1. Introduction

Geospatial data analytics lets the eye recognize patterns like distance, proximity, contiguity and affiliation that are hidden in massive datasets. The visualization of spatial data also makes it easier to see how things are changing over time and where the change is most pronounced.

Benefits of geospatial analytics include:

-   **Engaging insights** --- Seeing data in the context of a visual map makes it easier to understand how events are unfolding and how to react to those events.

-   **Better foresight** --- Seeing how spatial conditions are changing in real time can help an organization better prepare for change and determine future action.

-   **Targeted solutions** --- Seeing location-based data helps organizations understand why some locations and countries, such as the United States, are more successful for business than others.

    Geospatial analytics has quite a lot of use cases in various industries as shown in the below figure

-   <div>

    ![](images/geospatial.jpg){fig-align="center"}

    </div>

### 2. Glimpse of Steps

Some of the important steps performed in this study are as follows

-   installing and loading **sf and tidyverse** packages into R environment

-   importing **geospatial** data by using appropriate functions of **sf** package

-   importing **aspatial** data by using appropriate function of **readr** package

-   exploring the content of simple feature data frame by using appropriate Base R and sf functions

-   assigning or transforming coordinate systems by using using appropriate sf functions

-   converting an **aspatial data into a sf data frame** by using appropriate function of sf package

-   performing geoprocessing tasks by using appropriate functions of sf package

-   performing data wrangling tasks by using appropriate functions of dplyr package and performing **Exploratory Data Analysis (EDA)** by using appropriate functions from ggplot2 package

### 3. Data

Following data sets are used:

-   MP14_SUBZONE_WEB_PL - Master Plan 2014 Subzone Boundary (Web)

-   pre-schools-location-kml - Pre-Schools Location

-   CyclingPath files

-   listings.csv - Latest version of Singapore Airbnb listing data

### 4. Deep Dive into Map Analysis

#### 4.1 Installing and loading the required libraries

Major packages used are

**sf** - for importing, managing, and processing geospatial data

**tidyverse** - for performing data science tasks such as importing, wrangling and visualising data.

Tidyverse consists of a family of R packages. Following packages are used

-   **readr** for importing csv data,

-   **readxl** for importing Excel worksheet,

-   **tidyr** for manipulating data,

-   **dplyr** for transforming data,

-   **ggplot2** for visualising data

```{r}
pacman::p_load(sf, tidyverse, tmap)
```

#### 4.2. Importing Geospatial Data

##### 4.2.1 Importing polygon feature data in shapefile format

```{r}
mpsz = st_read(dsn = "data/geospatial", 
                  layer = "MP14_SUBZONE_WEB_PL")
```

##### 4.2.2 Importing polyline feature data in shapefile form

```{r}
cyclingpath = st_read(dsn ="data/geospatial", 
                         layer = "CyclingPath")
```

##### 4.2.3 Importing GIS data in kml format

```{r}
preschool = st_read("data/geospatial/pre-schools-location-kml.kml")
```

#### 4.3 Checking the Content of A Simple Feature Data Frame

##### 4.3.1 Using *st_geometry()*

```{r}
st_geometry(mpsz)

```

##### 4.3.2 Using glimpse()

```{r}
glimpse(mpsz)
```

##### 4.3.3 Using *head()*

```{r}
head(mpsz, n=5)  
```

#### 4.4. Plotting Geospatial Data

```{r}
plot(mpsz)
```

plot geometry

```{r}
plot(st_geometry(mpsz))
```

plot palnning area

```{r}
plot(mpsz["PLN_AREA_N"])
```

#### 4.5 Mapping Projection

##### 4.5.1 Assigning EPSG code

```{r}
st_crs(mpsz)
mpsz3414 <- st_set_crs(mpsz, 3414)
st_crs(mpsz3414)
```

##### 4.5.2 Transforming the projection of preschool from wgs84 to svy21

```{r}
preschool3414 <- st_transform(preschool, 
                              crs = 3414)
```

#### 4.6 Importing aspatial data

```{r}
listings <- read_csv("data/aspatial/listings.csv")
```

##### 4.6.1 Creating simple feature df from aspatial df

```{r}
listings_sf <- st_as_sf(listings, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 3414)
```

#### 4.7 Geoprocessing with sf package

##### 4.7.1 Buffering

```{r}
buffer_cycling <- st_buffer(cyclingpath, 
                               dist=5, nQuadSegs = 30)
buffer_cycling$AREA <- st_area(buffer_cycling)
sum(buffer_cycling$AREA)
```

##### 4.7.2 Point in polygon count

```{r}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
summary(mpsz3414$`PreSch Count`)
top_n(mpsz3414, 1, `PreSch Count`)
```

##### 4.7.3 Computing Density of preschool by Planning Subzone

```{r}
mpsz3414$Area <- mpsz3414 %>%
  st_area()
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

#### 4.8 Exploratory Data Analysis

##### 4.8.1 How the preschool density is distributed?

```{r}
hist(mpsz3414$`PreSch Density`)
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```

##### 4.8.2 What is the r**elationship between Pre-school Density and Pre-school Count?**

```{r}
ggplot(mpsz3414, 
       aes(x=as.numeric(`PreSch Density`), 
           y=`PreSch Count`)) + 
    geom_point()+
    coord_cartesian(xlim=c(0,40),
                  ylim=c(0,40))+
    labs(title="Are the schools densely located?",
         subtitle = "Relationship between no. of schools and density of schools per sq. km",
         x='Pre-school density (per km sq.)',
         y= 'Pre School count')+
    theme(axis.title.y=element_text(angle=0),
          axis.title.y.left = element_text(vjust = 0.5))
```

### 5. Conclusion

### 6. Key Takeaways
