---
title: "Geographical segmentation using clustering"
---

### 1. Quick Recap

In previous sections we have seen how to

-   handle geospatial and aspatial data

-   plot choropleth math

-   compute various types of spatial weights

-   derive spatial weight matrix

-   determine hotspot and coldspot areas

-   measure global and local measures of spatial autocorrelation

### 2. Introduction

The objective of this study is to understand how to delineate homogeneous region by using geographically referenced multivariate data. There are two major analysis, namely:

-   hierarchical cluster analysis; and

-   spatially constrained cluster analysis.

**What is geographical segmentation?**

Geographic segmentation divides a target market by location so marketers can better serve customers in a particular area. This type of market segmentation is based on the geographic units themselves (countries, states, cities, etc.), but also on various geographic factors, such as climate, cultural preferences, populations, and more.

![Fig 1: Vietnam - Geographic Segmentation](images/clustering.PNG){fig-align="center"}

### 3. Glimpse of Steps

In this study, we are going to delineate [Shan State](https://en.wikipedia.org/wiki/Shan_State), [Myanmar](https://en.wikipedia.org/wiki/Myanmar) into homogeneous regions by using multiple Information and Communication technology (ICT) measures, namely: Radio, Television, Land line phone, Mobile phone, Computer, and Internet at home.

Some of the important steps performed in this study are as follows

performing custer analysis by using *hclust()* of Base R; performing spatially constrained cluster analysis using *skater()* of Base visualising the analysis output by using **ggplot2** and **tmap** package.

### 4. Data

Following two data sets are used:

-   Myanmar Township Boundary Data (i.e. *myanmar_township_boundaries*) : This is a GIS data in ESRI shapefile format. It consists of township boundary information of Myanmar. The spatial data are captured in polygon features.

-   *Shan-ICT.csv*: This is an extract of [**The 2014 Myanmar Population and Housing Census Myanmar**](https://myanmar.unfpa.org/en/publications/2014-population-and-housing-census-myanmar-data-sheet) at the township level.

### 5.Deep Dive into Map Analysis

#### 5.1 Installing libraries and Importing files

[`p_load`](https://cran.r-project.org/web/packages/pacman/pacman.pdf) function pf [**pacman**](https://github.com/trinker/pacman) package is used to install and load sf all necessary packages into R environment.

-   **sf**, **rgdal** and **spdep -** Spatial data handling

-   **tidyverse**, especially **readr**, **ggplot2** and **dplyr -** Attribute data handling

-   **tmap -**Choropleth mapping

-   **coorplot**, **ggpubr**, and **heatmaply -** Multivariate data visualisation and analysis

-   **cluster, ClustGeo -** Cluster analysis

The code chunk below installs and launches these R packages into R environment.

```{r}
#| code-fold: true
#| code-summary: "Loading packages"

pacman::p_load(rgdal, spdep, tmap, sf, 
               ggpubr, cluster, factoextra, NbClust,
               heatmaply, corrplot, psych, tidyverse, purrr)
```

The Myanmar Township Boundary GIS data is in ESRI shapefile format. It is imported into R environment by using the [*st_read()*](https://www.rdocumentation.org/packages/sf/versions/0.7-2/topics/st_read) function of **sf**. The imported InfoComm variables are extracted from **The 2014 Myanmar Population and Housing Census Myanmar**. The attribute data set is called *ict*. It is saved in R's tibble data.frame format.

```{r, message=FALSE}
#| code-fold: true
#| code-summary: "Importing data"

shan_sf <- st_read(dsn = "data/geospatial", 
                   layer = "myanmar_township_boundaries") %>%
  filter(ST %in% c("Shan (East)", "Shan (North)", "Shan (South)"))

ict <- read_csv ("data/aspatial/Shan-ICT.csv")

```

#### 5.2 Data Wrangling

It is wiser to take proportion of no. of households present instead of using the numbers directly. So, let us preprocess the data accordingly by using the code chunk below:

```{r}
#| code-fold: true
#| code-summary: "Preprocessing data"

ict_derived <- ict %>%
  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %>%
  mutate(`TV_PR` = `Television`/`Total households`*1000) %>%
  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %>%
  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %>%
  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %>%
  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %>%
  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,
         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,
         `TT_HOUSEHOLDS`=`Total households`,
         `RADIO`=`Radio`, `TV`=`Television`, 
         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,
         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) 

```

Let's verify if the new columns are added bu using colnames()

```{r}
colnames(ict_derived)
```

We can see that six new fields namely RADIO_PR, TV_PR, LLPHONE_PR, MPHONE_PR, COMPUTER_PR, and INTERNET_PR have been added into the data.frame.

#### 5.3 Exploratory Data Analysis

**How many are using radio?**

Let us visualize using histogram

```{r}
#| code-fold: true
#| code-summary: "Histogram - radio users"

ggplot(data=ict_derived, 
       aes(x=`RADIO`,
           y= ..density..)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")+
  geom_density(color="red",
               alpha=0.2)
```

Let us detect now if there are any outliers. Also the plot shows the distribution is not normal. And so let us plot the derived one.

```{r}
#| code-fold: true
#| code-summary: "Outliers - Box plot"

ggplot(data=ict_derived, 
       aes(x=`RADIO`)) +
  geom_boxplot(color="black", 
               fill="light blue")
```

Let us plot the distribution of the newly derived variables (i.e. Radio penetration rate) by using the code chunk below.

```{r}
#| code-fold: true
#| code-summary: "Radio users-proportion plot"

ggplot(data=ict_derived, 
       aes(x=`RADIO_PR`,
           y= ..density..)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")+
  geom_density(color="red",
               alpha = 0.2)
```

```{r}
#| code-fold: true
#| code-summary: "Outliers in derived proportion"

ggplot(data=ict_derived, 
       aes(x=`RADIO_PR`)) +
  geom_boxplot(color="black", 
               fill="light blue")
```

**Observation**:

Both the above plot shows that the data follows normal distribution and there is only one outlier.

Similarly, now let's plot for all other communication medium. First let us plot all the histograms individually and then merge them using *tmap_arrange()* function.

```{r, fig.height=8, fig.width=12}
#| code-fold: true
#| code-summary: "Histogram for all ICT medium"

radio <- ggplot(data=ict_derived, 
             aes(x= `RADIO_PR`,
                 y= ..density..)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="coral")+
  geom_density(color="black",
               alpha = 0.2)

tv <- ggplot(data=ict_derived, 
             aes(x= `TV_PR`,
                 y= ..density..)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="coral")+
  geom_density(color="red",
               alpha = 0.2)

llphone <- ggplot(data=ict_derived, 
             aes(x= `LLPHONE_PR`,
                 y= ..density..)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="coral")+
    geom_density(color="black",
               alpha = 0.2)

mphone <- ggplot(data=ict_derived, 
             aes(x= `MPHONE_PR`,
                 y= ..density..)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="coral")+
  geom_density(color="black",
               alpha = 0.2)

computer <- ggplot(data=ict_derived, 
             aes(x= `COMPUTER_PR`,
                 y= ..density..)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="coral")+
  geom_density(color="black",
               alpha = 0.2)

internet <- ggplot(data=ict_derived, 
             aes(x= `INTERNET_PR`,
                 y= ..density..)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="coral")+
  geom_density(color="black",
               alpha = 0.)

ggarrange(radio, tv, llphone, mphone, computer, internet, 
          ncol = 3, 
          nrow = 2)
```

#### 5.4 Exploratory Spatial Data Analysis

Before we visualise the maps using choropleth, let us first combine both geospatial and aspatial datsets into one simple feature dataframe using the code chunk below.

```{r}
#| code-fold: true
#| code-summary: "Combining geospatial and aspatial data"

shan_sf <- left_join(shan_sf, 
                     ict_derived, 
                     by=c("TS_PCODE"="TS_PCODE"))
```

**What is the distribution of Radio penetration rate of Shan State?**

```{r}
qtm(shan_sf, "RADIO_PR")
```

In order to reveal the distribution shown in the choropleth map above are bias to the underlying total number of households at the townships, we will create two choropleth maps, one for the total number of households (i.e. TT_HOUSEHOLDS.map) and one for the total number of household with Radio (RADIO.map) by using the code chunk below.

```{r,fig.height=10, fig.width= 15, message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "choropleth maps"

TT_HOUSEHOLDS.map <- tm_shape(shan_sf) + 
  tm_fill(col = "TT_HOUSEHOLDS",
          n = 5,
          palette = "BuPu",
          style = "jenks", 
          title = "Total households") + 
  tm_legend(legend.position = c("right", "bottom"))+
  tm_layout(main.title = "Households",
            main.title.position = "center",
            main.title.size = 1,
            legend.height = 1, 
            legend.width = 1,
            legend.text.size = 1,
            legend.title.size = 1,
            main.title.fontface = "bold")+
  tm_compass(type="8star",
             position=c("right", "top"))+
  tm_borders(alpha = 0.5) 

RADIO.map <- tm_shape(shan_sf) + 
  tm_fill(col = "RADIO",
          n = 5,
          palette = "BuPu",
          style = "jenks",
          title = "Number Radio ") + 
  tm_legend(legend.position = c("right", "bottom"))+
  tm_layout(main.title = "Households with radio",
            main.title.position = "center",
            main.title.size = 1,
            legend.height = 1, 
            legend.width = 1,
            legend.text.size = 1,
            legend.title.size = 1,
            main.title.fontface = "bold")+
  tm_compass(type="8star",
             position=c("right", "top"))+
  tm_borders(alpha = 0.5) 

tmap_arrange(TT_HOUSEHOLDS.map, RADIO.map,
             asp=NA, ncol=2)
```

The maps above clearly show that townships with relatively larger number of households are also showing relatively higher number of radio ownership.

Now let us plot the choropleth maps showing the dsitribution of total number of households and Radio penetration rate by using the code chunk below.

```{r,fig.height=10, fig.width= 15, message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Plotting Map"


tm_shape(shan_sf) +
    tm_polygons(c("TT_HOUSEHOLDS", "RADIO_PR"),
                style="jenks") +
    tm_fill(palette = "BuPu")+
    tm_facets(sync = TRUE, ncol = 2) +
  tm_legend(legend.position = c("right", "bottom"))+
  tm_layout(outer.margins=0, asp=0,
            main.title = "Total households and Households using Radio proportion",
            main.title.position = "center",
            main.title.size = 1,
            legend.height = 1, 
            legend.width = 1,
            legend.text.size = 1,
            legend.title.size = 1,
            main.title.fontface = "bold")+
   tm_compass(type="8star",
             position=c("right", "top"))
  
```

**Observation**:

Unlike the previous map, here we can observe the regions where majority of households using radio out of total no. of households. For eg, we can see the central region has got quite a lot no. of households, but the no. of households using radio by proportion are more in northern region. This is the advantage of using proportion values instead of actual numbers.

#### 5.5 Correlation Analysis

Before we perform cluster analysis, it is important for us to ensure that the cluster variables are not highly correlated.

In this section, you will learn how to use [*corrplot.mixed()*](https://cran.r-project.org/web/packages/corrplot/corrplot.pdf) function of [**corrplot**](https://cran.r-project.org/web/packages/corrplot/vignettes/corrplot-intro.html) package to visualise and analyse the correlation of the input variables.

```{r}
#| code-fold: true
#| code-summary: "Correlation"

cluster_vars.cor = cor(ict_derived[,12:17])
corrplot.mixed(cluster_vars.cor,
         lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black")
```

The correlation plot above shows that COMPUTER_PR and INTERNET_PR are highly correlated. This suggest that only one of them should be used in the cluster analysis instead of both.

#### 5.6 Hierarchy Cluster Analysis

Now let us perform hierarchical cluster analysis. The analysis consists of four major steps:

1.  Extracting clustering variables

2.  Data standardisation

3.  Visualising the clustering variables

4.  Computing Proximity Matrix

**Extracting clustering variables**

```{r}
#| code-fold: true
#| code-summary: "Clustering"

cluster_vars <- shan_sf %>%
  st_set_geometry(NULL) %>%
  select("TS.x", "RADIO_PR", "TV_PR", "LLPHONE_PR", "MPHONE_PR", "COMPUTER_PR")
head(cluster_vars,10)
```

Now let us rename the township name instead of row number and delete the old one using the code chunk below

```{r}
#| code-fold: true
#| code-summary: "Renaming column"

row.names(cluster_vars) <- cluster_vars$"TS.x"
shan_ict <- select(cluster_vars, c(2:6))
head(shan_ict, 10)
```

**Data Standardisation**

In order to avoid the cluster analysis result is baised to clustering variables with large values, it is useful to standardise the input variables before performing cluster analysis.

**Performing Min-Max standardisation**

In the code chunk below, *normalize()* of [*heatmaply*](https://cran.r-project.org/web/packages/heatmaply/) package is used to stadardisation the clustering variables by using Min-Max method. The *summary()* is then used to display the summary statistics of the standardised clustering variables.

```{r}
#| code-fold: true
#| code-summary: "Min-Max standardisation"

shan_ict.std <- normalize(shan_ict)
summary(shan_ict.std)
```

**Performing Z-score standardisation**

Z-score standardisation can be performed easily by using [*scale()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/scale) of Base R. The code chunk below will be used to stadardisation the clustering variables by using Z-score method.

```{r}
#| code-fold: true
#| code-summary: "Z standardisation"

shan_ict.z <- scale(shan_ict)
describe(shan_ict.z)
```

We observe that mean and standard deviation of the Z-score standardised clustering variables are 0 and 1 respectively. We should take note that Z-score standardisation method should only be used if we would assume all variables come from some normal distribution.

**Visualising the standardised clustering variables**

Let us visualise the standardised clustering variables graphically in addition to summary statistics

```{r, fig.width=14}
#| code-fold: true
#| code-summary: "Visualising clustering variables"


r <- ggplot(data=ict_derived, 
             aes(x= `RADIO_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")+
  ggtitle("Before Standardisation")

shan_ict_s_df <- as.data.frame(shan_ict.std)
s <- ggplot(data=shan_ict_s_df, 
       aes(x=`RADIO_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  ggtitle("Min-Max Standardisation")

shan_ict_z_df <- as.data.frame(shan_ict.z)
z <- ggplot(data=shan_ict_z_df, 
       aes(x=`RADIO_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  ggtitle("Z-score Standardisation")

ggarrange(r, s, z,
          ncol = 3,
          nrow = 1)
```

We can observe that after standardisation, the variables follow normal distribution.

**Computing Proximity Matrix** The code chunk below is used to compute the proximity matrix using *euclidean* method although the function *dist()* supports six distance proximity calculations, they are: **euclidean, maximum, manhattan, canberra, binary and minkowski**.

```{r}
#| code-fold: true
#| code-summary: "Proximity matrix"

proxmat <- dist(shan_ict, method = 'euclidean')

```

**Computing hierarchical clustering**

The code chunk below performs hierarchical cluster analysis using ward.D method. The hierarchical clustering output is stored in an object of class **hclust** which describes the tree produced by the clustering process.

```{r}
#| code-fold: true
#| code-summary: "Hierarchical clustering"

hclust_ward <- hclust(proxmat, method = 'ward.D')
plot(hclust_ward, cex = 0.6)
```

**Selecting the optimal clustering algorithm**

We can identify stronger clustering structures by using use [*agnes()*](https://www.rdocumentation.org/packages/cluster/versions/2.1.0/topics/agnes) function of [**cluster**](https://cran.r-project.org/web/packages/cluster/) package. It functions like *hclus()*, however, with the *agnes()* function you can also get the agglomerative coefficient, which measures the amount of clustering structure found (values closer to 1 suggest strong clustering structure).

The code chunk below will be used to compute the agglomerative coefficients of all hierarchical clustering algorithms.

```{r}
#| code-fold: true
#| code-summary: "optimal clustering"

m <- c( "average", "single", "complete", "ward")
names(m) <- c( "average", "single", "complete", "ward")

ac <- function(x) {
  agnes(shan_ict, method = x)$ac
}

map_dbl(m, ac)
```

We can see that Ward's method provides the strongest clustering structure among the four methods assessed. Hence, in the subsequent analysis, only Ward's method will be used.

**Determining Optimal Clusters**

There are [three](https://www.datanovia.com/en/lessons/determining-the-optimal-number-of-clusters-3-must-know-methods/) commonly used methods to determine the optimal no. of clusters, they are:

-   [Elbow Method](https://en.wikipedia.org/wiki/Elbow_method_(clustering))

-   [Average Silhouette Method](https://www.sciencedirect.com/science/article/pii/0377042787901257?via%3Dihub)

-   [Gap Statistic Method](https://statweb.stanford.edu/~gwalther/gap)

The gap statistic compares the total within intra-cluster variation for different values of k with their expected values under null reference distribution of the data. The estimate of the optimal clusters will be value that maximize the gap statistic (i.e., that yields the largest gap statistic). This means that the clustering structure is far away from the random uniform distribution of points.

To compute the gap statistic, clusGap() of cluster package will be used.

```{r}
#| code-fold: true
#| code-summary: "optimal no. of clusters"

set.seed(3456)
gap_stat <- clusGap(shan_ict, 
                    FUN = hcut, 
                    nstart = 25, 
                    K.max = 10, 
                    B = 50)
# Print the result
print(gap_stat, method = "firstmax")
```

Next, we can visualise the plot by using [*fviz_gap_stat()*](https://rpkgs.datanovia.com/factoextra/reference/fviz_nbclust.html) of [**factoextra**](https://rpkgs.datanovia.com/factoextra/) package.

```{r}
fviz_gap_stat(gap_stat)
```

So, we can conclude that the recommended number of cluster to retain is 1. However, it is not logical to retain only one cluster. By examine the gap statistic graph, the 6-cluster gives the largest gap statistic and should be the next best cluster to pick.

**Interpreting the dendrograms**

Let us draw the dendrogram with a border around the selected clusters by using [*rect.hclust()*](https://stat.ethz.ch/R-manual/R-devel/library/stats/html/rect.hclust.html) of R stats. The argument *border* is used to specify the border colors for the rectangles.

```{r}
#| code-fold: true
#| code-summary: "Dendrograms"

plot(hclust_ward, cex = 0.6)
rect.hclust(hclust_ward, 
            k = 6, 
            border = 2:5)
```

**Hierarchical clustering analysis using heatmaply**

In this section, we will learn how to perform visually-driven hiearchical clustering analysis by using [*heatmaply*](https://cran.r-project.org/web/packages/heatmaply/) package. With **heatmaply**, we are able to build both highly interactive cluster heatmap or static cluster heatmap.

1.  First transform *shan_ict* data frame into a data matrix

2.  heatmaply() of [heatmaply](https://talgalili.github.io/heatmaply/) package is used to build an interactive cluster heatmap

```{r}
#| code-fold: true
#| code-summary: "Hierarchical clustering"

shan_ict_mat <- data.matrix(shan_ict)
heatmaply(normalize(shan_ict_mat),
          Colv=NA,
          dist_method = "euclidean",
          hclust_method = "ward.D",
          seriate = "OLO",
          colors = Blues,
          k_row = 6,
          margins = c(NA,200,60,NA),
          fontsize_row = 4,
          fontsize_col = 5,
          main="Geographic Segmentation of Shan State by ICT indicators",
          xlab = "ICT Indicators",
          ylab = "Townships of Shan State"
          )
```

**Mapping the clusters formed**

Based on the above dendragram, let us decide to retain six clusters. [*cutree()*](https://stat.ethz.ch/R-manual/R-devel/library/stats/html/cutree.html) of R Base will be used in the code chunk below to derive a 6-cluster model.

```{r}
groups <- as.factor(cutree(hclust_ward, k=6))
```

The code chunk below appends the *groups* object onto *shan_sf* simple feature object in three steps:

-   the *groups* list object will be converted into a matrix

-   *cbind()* is used to append *groups* matrix onto shan_sf to produce an output simple feature object called `shan_sf_cluster`

-   *rename* of **dplyr** package is used to rename *as.matrix.groups* field as *CLUSTER*

```{r}
#| code-fold: true
#| code-summary: "Renaming column"

shan_sf_cluster <- cbind(shan_sf, as.matrix(groups)) %>%
  rename(`CLUSTER`=`as.matrix.groups.`)
```

Next, *qtm()* of **tmap** package is used to plot the choropleth map showing the cluster formed

```{r, message=FALSE, warning=FALSE}
qtm(shan_sf_cluster, "CLUSTER")
```

The choropleth map above reveals the clusters are very fragmented. The is one of the major limitation when non-spatial clustering algorithm such as hierarchical cluster analysis method is used.

#### 5.8 Spatially Constrained Clustering - SKATER

Let us see how to derive spatially constrained cluster by using [*skater()*](https://r-spatial.github.io/spdep/reference/skater.html) method of [**spdep**](https://r-spatial.github.io/spdep/) package.

**Converting into SpatialPolygonsDataFrame**

Let us convert `shan_sf` into SpatialPolygonsDataFrame. as SKATER function only support **sp** objects such as SpatialPolygonDataFrame.

The code chunk below uses [*as_Spatial()*](https://r-spatial.github.io/sf/reference/coerce-methods.html) of **sf** package to convert *shan_sf* into a SpatialPolygonDataFrame called *shan_sp*.

```{r}
shan_sp <- as_Spatial(shan_sf)
```

**Computing Neighbour List**

[poly2nd()](https://r-spatial.github.io/spdep/reference/poly2nb.html) of **spdep** package will be used to compute the neighbours list from polygon list

```{r}
#| code-fold: true
#| code-summary: "Neighbour list"

shan.nb <- poly2nb(shan_sp)
summary(shan.nb)
```

```{r}
#| code-fold: true
#| code-summary: "Neighbouring list network"

plot(shan_sp, 
     border=grey(.5))
plot(shan.nb, 
     coordinates(shan_sp), 
     col="red", 
     add=TRUE)
```

**Computing minimum spanning tree**

[*nbcosts()*](https://r-spatial.github.io/spdep/reference/nbcosts.html) of **spdep** package is used to compute the cost of each edge. It is the distance between it nodes. This function compute this distance using a data.frame with observations vector in each node.

The code chunk below is used to compute the cost of each edge.

```{r}
lcosts <- nbcosts(shan.nb, shan_ict)
```

Next, let us incorporate these costs into a weights object in the same way as we did in the calculation of inverse of distance weights. In other words, we convert the neighbour list to a list weights object by specifying the just computed ***lcosts*** as the weights.

```{r}
#| code-fold: true
#| code-summary: "costs into weights"

shan.w <- nb2listw(shan.nb, 
                   lcosts, 
                   style="B")
summary(shan.w)
```

**Computing minimum spanning tree**

The minimum spanning tree is computed by mean of the [*mstree()*](https://r-spatial.github.io/spdep/reference/mstree.html) of **spdep** package as shown in the code chunk below

```{r}
shan.mst <- mstree(shan.w)
class(shan.mst)
```

The plot method for the MST include a way to show the observation numbers of the nodes in addition to the edge. As before, we plot this together with the township boundaries. We can see how the initial neighbour list is simplified to just one edge connecting each of the nodes, while passing through all the nodes.

```{r}
#| code-fold: true
#| code-summary: "Plotting Minimum spanning tree"

plot(shan_sp, border=gray(.5))
plot.mst(shan.mst, 
         coordinates(shan_sp), 
         col="blue", 
         cex.lab=0.7, 
         cex.circles=0.005, 
         add=TRUE)
```

**Computing spatially constrained clusters using SKATER method**

The code chunk below compute the spatially constrained cluster using [*skater()*](https://r-spatial.github.io/spdep/reference/skater.html) of **spdep** package

```{r}
#| code-fold: true
#| code-summary: "Spatially constrained cluster"

clust6 <- skater(edges = shan.mst[,1:2], 
                 data = shan_ict, 
                 method = "euclidean", 
                 ncuts = 5)
```

Lastly, let us plot the pruned tree that shows the five clusters on top of the townshop area.

```{r}
#| code-fold: true
#| code-summary: "Pruned tree"

plot(shan_sp, border=gray(.5))
plot(clust6, 
     coordinates(shan_sp), 
     cex.lab=.7,
     groups.colors=c("red","green","blue", "brown", "pink"),
     cex.circles=0.005, 
     add=TRUE)
```

**Visualising the clusters in choropleth map**

The code chunk below is used to plot the newly derived clusters by using SKATER method

```{r, message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Choropleth clustering"

groups_mat <- as.matrix(clust6$groups)
shan_sf_spatialcluster <- cbind(shan_sf_cluster, as.factor(groups_mat)) %>%
  rename(`SP_CLUSTER`=`as.factor.groups_mat.`)
qtm(shan_sf_spatialcluster, "SP_CLUSTER")
```

For effective interpretation, let us plot both the hierarchical clustering and spatially constrained hierarchical clustering maps next to each other.

```{r,fig.height=10, fig.width= 14, message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Clustering comparison"

hclust.map <- qtm(shan_sf_cluster,
                  "CLUSTER") + 
  tm_borders(alpha = 0.5) 

shclust.map <- qtm(shan_sf_spatialcluster,
                   "SP_CLUSTER") + 
  tm_borders(alpha = 0.5) 

tmap_arrange(hclust.map, shclust.map,
             asp=NA, ncol=2)
```

The map on the right shows the clusters of the region vividly which helps us to delineate homogeneous region easily.

### 6. Conclusion

In this study, we have achieved delineating homogeneous region of [Shan State](https://en.wikipedia.org/wiki/Shan_State), [Myanmar](https://en.wikipedia.org/wiki/Myanmar) by using multiple Information and Communication technology (ICT) measures, namely: Radio, Television, Land line phone, Mobile phone, Computer, and Internet at home. In the upcoming section, In the upcoming section let us see how to calibrate Hedonic Pricing Model for Private Highrise Property with GWR Method. Stay tuned..................
