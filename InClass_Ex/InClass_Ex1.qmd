---
title: "Spatial Weights and Applications"
---

### 1. Quick Recap

In previous sections we have seen how to

-   extract geospatial and aspatial datasets

-   convert one projection to another

-   perform exploratory data analysis

-   create choropleth map using tmap's elements and leverage its aesthetics

### 2. Introduction

Spatial statistics integrate space and spatial relationships directly into their mathematics (area, distance, length, or proximity, for example). Typically, these spatial relationships are defined formally through values called spatial weights. Spatial weights are structured into a spatial weights matrix and stored as a [spatial weights matrix file](https://pro.arcgis.com/en/pro-app/3.0/tool-reference/spatial-statistics/modeling-spatial-relationships.htm#GUID-516F26AF-583B-4918-AB13-0DBEA946F072). Spatial weights are a way to define spatial neighbourhood. One practical use case can be - Are these two planning zones neighbours? They can be determined by either contiguity neighbours - rook / hexagon / queen or adjacency based neighbours - weight matrix

![](images/spatial%20weights.PNG){fig-align="center"}

### 3. Glimpse of Steps

Some of the important steps performed in this study are as follows

-   importing geospatial data using appropriate function(s) of **sf** package,

-   importing csv file using appropriate function of **readr** package,

-   performing relational join using appropriate join function of **dplyr** package,

-   computing spatial weights using appropriate functions of **spdep** package, and

-   calculating spatially lagged variables using appropriate functions of **spdep** package.

### 4. Data

Following two data sets are used:

-   Hunan country boundary layer. This is a geospatial data set in ESRI shapefile format.

-   Hunan_2012.csv: This csv file contains selected Hunan's local development indicators in 2012.

### 5. Deep Dive into Map Analysis

#### 5.1 Installing libraries and Importing files

[`p_load`](https://cran.r-project.org/web/packages/pacman/pacman.pdf) function pf [**pacman**](https://github.com/trinker/pacman) package is used to install and load sf ,tidyverse and tmap packages into R environment. First, let us import Hunan shapefile into R using [*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package. The imported shapefile will be **simple features** Object of **sf**. Next, let us import *Hunan_2012.csv* into R by using *read_csv()* of **readr** package. The output is R dataframe class.

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse)
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

#### 5.2 Data Wrangling

The code chunk below will be used to update the attribute table of *hunan*'s SpatialPolygonsDataFrame with the attribute fields of *hunan2012* dataframe. This is performed by using *left_join()* of **dplyr** package.

```{r}
hunan <- left_join(hunan,hunan2012)
```

#### 5.3 Visualising Regional Development Indicator

Now, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using *qtm()* of **tmap** package.

```{r}
basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text("NAME_3", size=0.5)

gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

#### 5.4 Computing Contiguity Spatial Weights

In this sub section, let u see how to use [*poly2nb()*](https://r-spatial.github.io/spdep/reference/poly2nb.html) of **spdep** package to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries.

##### 5.4.1 Computing (QUEEN) contiguity based neighbours

The code chunk below is used to compute Queen contiguity weight matrix.

```{r}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
```

The summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one heighbours.

```{r}
wm_q[[1]]
hunan$County[1]
hunan$NAME_3[c(2,3,4,57,85)]
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

##### 5.4.2 Creating (ROOK) contiguity based neighbours

The code chunk below is used to compute Rook contiguity weight matrix.

```{r}
wm_r <- poly2nb(hunan, queen=FALSE)
summary(wm_r)

```

The summary report above shows that there are 88 area units in Hunan. The most connect area unit has 10 neighbours. There are two area units with only one heighbours.

##### 5.4.3 Visualising contiguity weights

A connectivity graph takes a point and displays a line to each neighboring point. One of the most common method to get points in order to make connectivity graphs is **polygon centroids.** Let us calculate these in the sf package before moving onto the graphs.

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
coords <- cbind(longitude, latitude)
```

##### 5.4.4 Plotting Queen contiguity based neighbours map

The code chunk below is used to plot Queen contiguity based neighbours map

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
```

##### 5.4.5 Plotting Rook contiguity based neighbours map

The code chunk below is used to plot Rook contiguity based neighbours map

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

##### 5.4.6 Plotting both Queen and Rook contiguity based neighbours maps

The code chunk below is used to plot both Queen and Rook contiguity based neighbours maps

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red", main="Queen Contiguity")
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red", main="Rook Contiguity")
```

#### 5.5 Computing distance based neighbours

In this section, let us learn how to derive distance-based weight matrices by using [*dnearneigh()*](https://r-spatial.github.io/spdep/reference/dnearneigh.html) of **spdep** package.

##### 5.5.1 Determine the cut-off distance

Firstly, let us determine the upper limit for distance band by using the steps below:

-   Return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using [*knearneigh()*](https://r-spatial.github.io/spdep/reference/knearneigh.html) of **spdep**.

-   Convert the knn object returned by *knearneigh()* into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using [*knn2nb()*](https://r-spatial.github.io/spdep/reference/knn2nb.html).

-   Return the length of neighbour relationship edges by using [*nbdists()*](https://r-spatial.github.io/spdep/reference/nbdists.html) of **spdep**. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.

-   Remove the list structure of the returned object by using [**unlist()**](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/unlist).

```{r}
#coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

The summary report shows that the largest first nearest neighbour distance is 61.79 km, so let us consider it as the upper threshold gives certainty that all units will have at least one neighbour.

##### 5.5.2 Computing fixed distance weight matrix

Now, we will compute the distance weight matrix by using *dnearneigh()* as shown in the code chunk below.

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

##### 5.5.3 Plotting fixed distance weight matrix

Let us plot the distance weight matrix by using the code chunk below.

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE)
plot(k1, coords, add=TRUE, col="red", length=0.08)
```

**Alternative Approach**

We can also plot both of them next to each other by using the code chunk below.

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey")
plot(k1, coords, add=TRUE, col="red", length=0.08, main="1st nearest neighbours")
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6, main="Distance link")
```

##### 5.5.4 Computing adaptive distance weight matrix

More densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.
It is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.

```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6

```

##### 5.5.5 Plotting distance based neighbours

Let us plot the weight matrix using the code chunk below.

```{r}
plot(hunan$geometry, border="lightgrey")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

#### 5.6 Weights based on IDW

In this section, let us see how to derive a spatial weight matrix based on Inversed Distance method.

First, we will compute the distances between areas by using [*nbdists()*](https://r-spatial.github.io/spdep/reference/nbdists.html) of **spdep**.

```{r}
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
ids
```

##### 5.6.1 Row-standardised weights matrix

Next, we need to assign weights to each neighboring polygon

```{r}
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
rswm_q
rswm_q$weights[10]
rswm_ids <- nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
rswm_ids
rswm_ids$weights[1]
summary(unlist(rswm_ids$weights))
```

#### 5.7 Application of Spatial Weight Matrix

In this section, let us see how to create four different spatial lagged variables,

-   spatial lag with row-standardized weights,

-   spatial lag as a sum of neighbouring values,

-   spatial window average, and spatial window sum.

##### 5.7.1 Spatial lag with row-standardized weights

Finally, we'll compute the average neighbor GDPPC value for each polygon. These values are often referred to as **spatially lagged values**.
We can append the spatially lag GDPPC values onto hunan sf data frame by using the code chunk below.

```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
GDPPC.lag
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan <- left_join(hunan,lag.res)

```

##### 5.7.2 Comparing GDPPC and spatial lag GDPPC maps

Now, let us plot both the GDPPC and spatial lag GDPPC for comparison using the code chunk below.

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```

##### 5.7.3 Spatial lag as a sum of neighboring values

We can calculate spatial lag as a sum of neighboring values by assigning binary weights. This requires us to go back to our neighbors list, then apply a function that will assign binary weights, then we use glist = in the nb2listw function to explicitly assign these weights.

```{r}
b_weights <- lapply(wm_q, function(x) 0*x + 1)
b_weights2 <- nb2listw(wm_q, 
                       glist = b_weights, 
                       style = "B")
b_weights2

lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")

```

##### 5.7.4 Comparing *GDPPC* and *Spatial Lag Sum GDPPC* maps

We can plot both the *GDPPC* and *Spatial Lag Sum GDPPC* for comparison using the code chunk below.

```{r}
hunan <- left_join(hunan, lag.res)
gdppc <- qtm(hunan, "GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
```

##### 5.7.5 Spatial window average

The spatial window average uses row-standardized weights and includes the diagonal element.

1.  Firstly, let us assign k6 to a new variable because we will directly alter its structure to add the diagonal elements.

2.  To add the diagonal element to the neighbour list, let us use *include.self()* from **spdep**.

3.  As a next step, we have obtained weights with *nb2listw()*

4.  Lastly, we just need to create the lag variable from our weight structure and GDPPC variable.

```{r}
wm_q1 <- wm_q
include.self(wm_q1)
wm_q1 <- nb2listw(wm_q1)
wm_q1
lag_w_avg_gpdpc <- lag.listw(wm_q1, 
                             hunan$GDPPC)
lag_w_avg_gpdpc
lag.list.wm_q1 <- list(hunan$NAME_3, lag.listw(wm_q1, hunan$GDPPC))
lag_wm_q1.res <- as.data.frame(lag.list.wm_q1)
colnames(lag_wm_q1.res) <- c("NAME_3", "lag_window_avg GDPPC")
hunan <- left_join(hunan, lag_wm_q1.res)

```

##### 5.7.6 Comparing GDPPC and lag_window_avg GDPPC maps

We can plot both the *GDPPC* and *Lag window average GDPPC* for comparison using the code chunk below.

```{r}
gdppc <- qtm(hunan, "GDPPC")
w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC")
tmap_arrange(gdppc, w_avg_gdppc, asp=1, ncol=2)
```

##### 5.7.7 Spatial window sum

The spatial window sum is the counter part of the window average, but without using row-standardized weights.

Firstly, let us assign binary weights to the neighbor structure that includes the diagonal element.
To add the diagonal element to the neighbour list, let us just use *include.self()* from **spdep**.
Next, let us assign binary weights to the neighbour structure that includes the diagonal element
Now, let us use *nb2listw()* and *glist()* to explicitly assign weight values.

```{r}
wm_q1 <- wm_q
include.self(wm_q1)
wm_q1
b_weights <- lapply(wm_q1, function(x) 0*x + 1)
b_weights[1]
b_weights2 <- nb2listw(wm_q1, 
                       glist = b_weights, 
                       style = "B")
b_weights2
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")
hunan <- left_join(hunan, w_sum_gdppc.res)

```

##### 5.7.8 Comparing GDPPC and lag_sum GDPPC maps

We can plot both the *GDPPC* and *Lag sum GDPPC* for comparison using the code chunk below.

```{r}
gdppc <- qtm(hunan, "GDPPC")
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(gdppc, w_sum_gdppc, asp=1, ncol=2)
```

### 6. Conclusion & Key Takeaway

In this section, we have seen what is spatial weights and how to compute spatial weights. We have also witnessed types of contiguity based neighbours and what are the applications of it. Finally we have learnt how to compute various types of spatially lagged variables and compare it with general ones. Now that we have understood about spatial weights, let us see how spatial weights are used for auto correlation in upcoming session. Stay tuned..................
